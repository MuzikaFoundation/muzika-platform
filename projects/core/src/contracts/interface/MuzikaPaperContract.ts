/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

import * as contract from 'truffle-contract';
import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue
} from '../typechain-runtime';
import * as BuiltContract from '../../../../../muzika-contract/build/contracts/MuzikaPaperContract.json';

export interface IMuzikaPaperContract extends TruffleContractInstance {
  owner(): Promise<string>;
  originalFileHash(): Promise<string>;
  ipfsFileHash(): Promise<string>;
  isPurchased(user: EtherAddress): Promise<boolean>;

  transferOwnership: {
    (newOwner: EtherAddress, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      newOwner: EtherAddress,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (newOwner: EtherAddress, txParams?: ITxParams) => Promise<void>;
    request: (newOwner: EtherAddress) => Promise<string>;
    estimateGas: (newOwner: EtherAddress) => Promise<number>;
  };
  soldOut: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  purchase: {
    (
      _nonce: EtherInteger,
      _version: EtherInteger,
      _sig: string,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _nonce: EtherInteger,
      _version: EtherInteger,
      _sig: string,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _nonce: EtherInteger,
      _version: EtherInteger,
      _sig: string,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      _nonce: EtherInteger,
      _version: EtherInteger,
      _sig: string
    ) => Promise<string>;
    estimateGas: (
      _nonce: EtherInteger,
      _version: EtherInteger,
      _sig: string
    ) => Promise<number>;
  };
}

export const TruffleMuzikaPaperContract: () => TruffleContract<
  IMuzikaPaperContract
> = () => contract(BuiltContract);
