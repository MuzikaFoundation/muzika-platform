/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

import * as contract from 'truffle-contract';
import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue
} from '../typechain-runtime';
import * as BuiltContract from '../../../../../muzika-contract/build/contracts/MuzikaPaperContract.json';

export interface IMuzikaPaperContract extends TruffleContractInstance {
  lastPaperID(): Promise<BigNumber>;
  heartbeatTimeout(): Promise<BigNumber>;
  owner(): Promise<string>;
  heir(): Promise<string>;
  totalPapers(): Promise<BigNumber>;
  timeOfDeath(): Promise<BigNumber>;
  registeredPaper(
    arg0: EtherInteger
  ): Promise<[BigNumber, string, string, BigNumber, boolean, string]>;
  isPurchased(user: EtherAddress, paperID: EtherInteger): Promise<boolean>;

  claimHeirOwnership: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  setHeir: {
    (newHeir: EtherAddress, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      newHeir: EtherAddress,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (newHeir: EtherAddress, txParams?: ITxParams) => Promise<void>;
    request: (newHeir: EtherAddress) => Promise<string>;
    estimateGas: (newHeir: EtherAddress) => Promise<number>;
  };
  proclaimDeath: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  heartbeat: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  removeHeir: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  transferOwnership: {
    (newOwner: EtherAddress, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      newOwner: EtherAddress,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (newOwner: EtherAddress, txParams?: ITxParams) => Promise<void>;
    request: (newOwner: EtherAddress) => Promise<string>;
    estimateGas: (newOwner: EtherAddress) => Promise<number>;
  };
  sell: {
    (
      title: string,
      price: EtherInteger,
      fileHash: string,
      txParams?: ITxParams
    ): Promise<BigNumber>;
    sendTransaction: (
      title: string,
      price: EtherInteger,
      fileHash: string,
      txParams?: ITxParams
    ) => Promise<BigNumber>;
    call: (
      title: string,
      price: EtherInteger,
      fileHash: string,
      txParams?: ITxParams
    ) => Promise<BigNumber>;
    request: (
      title: string,
      price: EtherInteger,
      fileHash: string
    ) => Promise<string>;
    estimateGas: (
      title: string,
      price: EtherInteger,
      fileHash: string
    ) => Promise<number>;
  };
  purchase: {
    (paperID: EtherInteger, txParams?: ITxParams): Promise<boolean>;
    sendTransaction: (
      paperID: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (paperID: EtherInteger, txParams?: ITxParams) => Promise<boolean>;
    request: (paperID: EtherInteger) => Promise<string>;
    estimateGas: (paperID: EtherInteger) => Promise<number>;
  };
}

export const TruffleMuzikaPaperContract: () => TruffleContract<
  IMuzikaPaperContract
> = () => contract(BuiltContract);
