/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

/**
 * https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
 * Cannot call a namespace ('contract') Error fix
 */
import * as contractImported from 'truffle-contract';
const contract = contractImported;

import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  TruffleContract,
  TruffleContractInstance,
  TxValue
} from '../typechain-runtime';
export const BuiltContract = require('../../../../../muzika-contract/build/contracts/MuzikaPaperContract.json');

export interface IMuzikaPaperContract extends TruffleContractInstance {
  owner(): Promise<string>;
  seller(): Promise<string>;
  price(): Promise<BigNumber>;
  forSale(): Promise<boolean>;
  originalFileHash(): Promise<string>;
  ipfsFileHash(): Promise<string>;
  isPurchased(user: EtherAddress): Promise<boolean>;

  renounceOwnership: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  transferOwnership: {
    (newOwner: EtherAddress, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      newOwner: EtherAddress,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (newOwner: EtherAddress, txParams?: ITxParams) => Promise<void>;
    request: (newOwner: EtherAddress) => Promise<string>;
    estimateGas: (newOwner: EtherAddress) => Promise<number>;
  };
  soldOut: {
    (txParams?: ITxParams): Promise<void>;
    sendTransaction: (txParams?: ITxParams) => Promise<void>;
    call: (txParams?: ITxParams) => Promise<void>;
    request: () => Promise<string>;
    estimateGas: () => Promise<number>;
  };
  purchase: {
    (_buyer: EtherAddress, txParams?: ITxParams): Promise<boolean>;
    sendTransaction: (
      _buyer: EtherAddress,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (_buyer: EtherAddress, txParams?: ITxParams) => Promise<boolean>;
    request: (_buyer: EtherAddress) => Promise<string>;
    estimateGas: (_buyer: EtherAddress) => Promise<number>;
  };
  receiveApproval: {
    (
      _owner: EtherAddress,
      arg1: EtherInteger,
      arg2: EtherAddress,
      arg3: string,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _owner: EtherAddress,
      arg1: EtherInteger,
      arg2: EtherAddress,
      arg3: string,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _owner: EtherAddress,
      arg1: EtherInteger,
      arg2: EtherAddress,
      arg3: string,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      _owner: EtherAddress,
      arg1: EtherInteger,
      arg2: EtherAddress,
      arg3: string
    ) => Promise<string>;
    estimateGas: (
      _owner: EtherAddress,
      arg1: EtherInteger,
      arg2: EtherAddress,
      arg3: string
    ) => Promise<number>;
  };
}

export class MuzikaPaperContract extends TruffleContract<
  IMuzikaPaperContract
> {}

export const createTruffleMuzikaPaperContract: () => MuzikaPaperContract = () =>
  contract(BuiltContract);
