/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

/**
 * https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
 * Cannot call a namespace ('contract') Error fix
 */
import * as contractImported from 'truffle-contract';
const contract = contractImported;

import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue
} from '../typechain-runtime';
export const BuiltContract = require('../../../../../muzika-contract/build/contracts/MuzikaLoyaltyPoint.json');

export interface IMuzikaLoyaltyPoint extends TruffleContractInstance {
  name(): Promise<string>;
  decimals(): Promise<BigNumber>;
  exchangeRatio(): Promise<BigNumber>;
  owner(): Promise<string>;
  symbol(): Promise<string>;
  balanceOf(_owner: EtherAddress): Promise<BigNumber>;

  transferOwnership: {
    (newOwner: EtherAddress, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      newOwner: EtherAddress,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (newOwner: EtherAddress, txParams?: ITxParams) => Promise<void>;
    request: (newOwner: EtherAddress) => Promise<string>;
    estimateGas: (newOwner: EtherAddress) => Promise<number>;
  };
  updateExchangeRatio: {
    (_ratio: EtherInteger, txParams?: ITxParams): Promise<boolean>;
    sendTransaction: (
      _ratio: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (_ratio: EtherInteger, txParams?: ITxParams) => Promise<boolean>;
    request: (_ratio: EtherInteger) => Promise<string>;
    estimateGas: (_ratio: EtherInteger) => Promise<number>;
  };
  reward: {
    (_to: EtherAddress, _amount: EtherInteger, txParams?: ITxParams): Promise<
      boolean
    >;
    sendTransaction: (
      _to: EtherAddress,
      _amount: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _to: EtherAddress,
      _amount: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (_to: EtherAddress, _amount: EtherInteger) => Promise<string>;
    estimateGas: (_to: EtherAddress, _amount: EtherInteger) => Promise<number>;
  };
  exchange: {
    (_to: EtherAddress, txParams?: ITxParams): Promise<boolean>;
    sendTransaction: (
      _to: EtherAddress,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (_to: EtherAddress, txParams?: ITxParams) => Promise<boolean>;
    request: (_to: EtherAddress) => Promise<string>;
    estimateGas: (_to: EtherAddress) => Promise<number>;
  };
  exchangeFromAddresses: {
    (_people: string[], txParams?: ITxParams): Promise<boolean>;
    sendTransaction: (
      _people: string[],
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (_people: string[], txParams?: ITxParams) => Promise<boolean>;
    request: (_people: string[]) => Promise<string>;
    estimateGas: (_people: string[]) => Promise<number>;
  };
}

export class MuzikaLoyaltyPoint extends TruffleContract<IMuzikaLoyaltyPoint> {}

export const createTruffleMuzikaLoyaltyPoint: () => MuzikaLoyaltyPoint = () =>
  contract(BuiltContract);
