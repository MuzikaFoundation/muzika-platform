/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */
import { isPlatformBrowser } from '@angular/common';
import { InjectionToken, PLATFORM_ID, Provider } from '@angular/core';
import { WEB3 } from '../app/web3.provider';
import { TruffleContract } from './typechain-runtime';

import { IMuzikaCoin, TruffleMuzikaCoin } from './interface/MuzikaCoin';
import { IMuzikaPaperContract, TruffleMuzikaPaperContract } from './interface/MuzikaPaperContract';

export { IMuzikaCoin, TruffleMuzikaCoin } from './interface/MuzikaCoin';
export { IMuzikaPaperContract, TruffleMuzikaPaperContract } from './interface/MuzikaPaperContract'

let ProviderFactory = (contractFunction: () => TruffleContract<any>) => {
  return (web3: any, platformId: string) => {
    if (isPlatformBrowser(platformId)) {
      let contract: TruffleContract<any> = contractFunction();
      contract.setProvider(web3.currentProvider);
      return contract;
    }

    // @TODO is that works?
    return null;
  };
};

export const MuzikaCoin = new InjectionToken<TruffleContract<IMuzikaCoin>>('MuzikaCoin');
export const MuzikaPaperContract = new InjectionToken<TruffleContract<IMuzikaPaperContract>>('MuzikaPaperContract');

export const ContractProviders: Provider[] = [
  { provide: MuzikaCoin, useFactory: ProviderFactory(TruffleMuzikaCoin), deps: [WEB3, PLATFORM_ID] },
  { provide: MuzikaPaperContract, useFactory: ProviderFactory(TruffleMuzikaPaperContract), deps: [WEB3, PLATFORM_ID] }
];
