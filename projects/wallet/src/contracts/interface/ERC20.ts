/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

import * as contract from 'truffle-contract';
import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue,
  promisify
} from '../typechain-runtime';
import BuiltContract from '../../../../../build/contracts/ERC20.json';

export interface IERC20 extends TruffleContractInstance {
  totalSupply(): Promise<BigNumber>;
  balanceOf(who: EtherAddress): Promise<BigNumber>;
  allowance(owner: EtherAddress, spender: EtherAddress): Promise<BigNumber>;

  transfer: {
    (to: EtherAddress, value: EtherInteger, txParams?: ITxParams): Promise<
      boolean
    >;
    sendTransaction: (
      to: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      to: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (to: EtherAddress, value: EtherInteger) => Promise<string>;
    estimateGas: (to: EtherAddress, value: EtherInteger) => Promise<number>;
  };
  transferFrom: {
    (
      from: EtherAddress,
      to: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      from: EtherAddress,
      to: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      from: EtherAddress,
      to: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      from: EtherAddress,
      to: EtherAddress,
      value: EtherInteger
    ) => Promise<string>;
    estimateGas: (
      from: EtherAddress,
      to: EtherAddress,
      value: EtherInteger
    ) => Promise<number>;
  };
  approve: {
    (spender: EtherAddress, value: EtherInteger, txParams?: ITxParams): Promise<
      boolean
    >;
    sendTransaction: (
      spender: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      spender: EtherAddress,
      value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (spender: EtherAddress, value: EtherInteger) => Promise<string>;
    estimateGas: (
      spender: EtherAddress,
      value: EtherInteger
    ) => Promise<number>;
  };
}

export const TruffleERC20: () => TruffleContract<IERC20> = () =>
  contract(BuiltContract);
