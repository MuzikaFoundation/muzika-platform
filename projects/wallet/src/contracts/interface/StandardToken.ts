/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

import * as contract from 'truffle-contract';
import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue,
  promisify
} from '../typechain-runtime';
import BuiltContract from '../../../../../build/contracts/StandardToken.json';

export interface IStandardToken extends TruffleContractInstance {
  totalSupply(): Promise<BigNumber>;
  balanceOf(_owner: EtherAddress): Promise<BigNumber>;
  allowance(_owner: EtherAddress, _spender: EtherAddress): Promise<BigNumber>;

  transfer: {
    (_to: EtherAddress, _value: EtherInteger, txParams?: ITxParams): Promise<
      boolean
    >;
    sendTransaction: (
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (_to: EtherAddress, _value: EtherInteger) => Promise<string>;
    estimateGas: (_to: EtherAddress, _value: EtherInteger) => Promise<number>;
  };
  transferFrom: {
    (
      _from: EtherAddress,
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _from: EtherAddress,
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _from: EtherAddress,
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      _from: EtherAddress,
      _to: EtherAddress,
      _value: EtherInteger
    ) => Promise<string>;
    estimateGas: (
      _from: EtherAddress,
      _to: EtherAddress,
      _value: EtherInteger
    ) => Promise<number>;
  };
  approve: {
    (
      _spender: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _spender: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _spender: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (_spender: EtherAddress, _value: EtherInteger) => Promise<string>;
    estimateGas: (
      _spender: EtherAddress,
      _value: EtherInteger
    ) => Promise<number>;
  };
  increaseApproval: {
    (
      _spender: EtherAddress,
      _addedValue: EtherInteger,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _spender: EtherAddress,
      _addedValue: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _spender: EtherAddress,
      _addedValue: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      _spender: EtherAddress,
      _addedValue: EtherInteger
    ) => Promise<string>;
    estimateGas: (
      _spender: EtherAddress,
      _addedValue: EtherInteger
    ) => Promise<number>;
  };
  decreaseApproval: {
    (
      _spender: EtherAddress,
      _subtractedValue: EtherInteger,
      txParams?: ITxParams
    ): Promise<boolean>;
    sendTransaction: (
      _spender: EtherAddress,
      _subtractedValue: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _spender: EtherAddress,
      _subtractedValue: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (
      _spender: EtherAddress,
      _subtractedValue: EtherInteger
    ) => Promise<string>;
    estimateGas: (
      _spender: EtherAddress,
      _subtractedValue: EtherInteger
    ) => Promise<number>;
  };
}

export const TruffleStandardToken: () => TruffleContract<IStandardToken> = () =>
  contract(BuiltContract);
