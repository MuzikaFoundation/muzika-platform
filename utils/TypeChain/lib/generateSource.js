"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var abiParser_1 = require("./abiParser");
var utils_1 = require("./utils");
function generateSource(abi, context) {
    var parsedContractAbi = abiParser_1.parse(abi);
    return codeGenForContract(abi, parsedContractAbi, context);
}
exports.generateSource = generateSource;
// @todo better typings for web3
function codeGenForContract(abi, input, context) {
    var typeName = "" + context.fileName;
    return "/* GENERATED BY TYPECHAIN VER. " + utils_1.getVersion() + " */\n/* tslint:disable */\n  \nimport * as contract from 'truffle-contract';\nimport { BigNumber } from 'bignumber.js';\nimport { EtherAddress, EtherInteger, ITxParams, RawAbiDefinition, TruffleContract, TruffleContractInstance, TxValue } from '" + context.relativeRuntimePath + "'\nimport * as BuiltContract from '" + context.relativeInputPath + "';\n\nexport interface I" + typeName + " extends TruffleContractInstance {\n    \n    " + input.constants
        .map(function (constant) {
        return constant.name + "(): Promise<" + constant.output.generateCodeForOutput() + ">;";
    })
        .join("\n") + " \n      " + input.constantFunctions
        .map(function (constantFunction) {
        return constantFunction.name + "(" + constantFunction.inputs
            .map(codeGenForParams)
            .join(", ") + "): Promise<" + codeGenForOutputTypeList(constantFunction.outputs) + ">";
    })
        .join(";\n") + " \n\n        " + input.functions
        .map(function (func) {
        var params = func.inputs.map(codeGenForParams);
        var inputParams = params.join(", ");
        var inputParamsWithTxParam = params.concat(['txParams?: ITxParams']).join(", ");
        return func.name + ": { (" + inputParamsWithTxParam + "): Promise<" + codeGenForOutputTypeList(func.outputs) + ">, sendTransaction: (" + inputParamsWithTxParam + ") => Promise<" + codeGenForOutputTypeList(func.outputs) + ">, call: (" + inputParamsWithTxParam + ") => Promise<" + codeGenForOutputTypeList(func.outputs) + ">, request: (" + inputParams + ") => Promise<string>, estimateGas: (" + inputParams + ") => Promise<number> }";
    })
        .join(";\n") + " \n}\n\nexport const Truffle" + typeName + ": () => TruffleContract<I" + typeName + "> = () => contract(BuiltContract);";
}
function codeGenForParams(param, index) {
    return (param.name || "arg" + index) + ": " + param.type.generateCodeForInput();
}
function codeGenForArgs(param, index) {
    var paramName = param.name || "arg" + index;
    return param.type.generateCodeForInputConversion(paramName);
}
function codeGenForOutputTypeList(output) {
    if (output.length === 1) {
        return output[0].generateCodeForOutput();
    }
    else {
        return "[" + output.map(function (x) { return x.generateCodeForOutput(); }).join(", ") + "]";
    }
}
