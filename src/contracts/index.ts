/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */
import { InjectionToken, Provider } from '@angular/core';
import { WEB3 } from '../app/web3.provider';
import { TruffleContract } from './typechain-runtime';

import { IBasicToken, TruffleBasicToken } from './interface/BasicToken';
import { IBurnableToken, TruffleBurnableToken } from './interface/BurnableToken';
import { IERC20, TruffleERC20 } from './interface/ERC20';
import { IERC20Basic, TruffleERC20Basic } from './interface/ERC20Basic';
import { IHeritable, TruffleHeritable } from './interface/Heritable';
import { IMigrations, TruffleMigrations } from './interface/Migrations';
import { IMintableToken, TruffleMintableToken } from './interface/MintableToken';
import { IMuzikaCoin, TruffleMuzikaCoin } from './interface/MuzikaCoin';
import { IMuzikaCoinSavingsWallet, TruffleMuzikaCoinSavingsWallet } from './interface/MuzikaCoinSavingsWallet';
import { IMuzikaPaperContract, TruffleMuzikaPaperContract } from './interface/MuzikaPaperContract';
import { IOwnable, TruffleOwnable } from './interface/Ownable';
import { IStandardToken, TruffleStandardToken } from './interface/StandardToken';

let ProviderFactory = (contract: TruffleContract<any>) => {
  return (web3: any) => {
    contract.setProvider(web3.currentProvider);
    return contract;
  };
};

export const BasicToken = new InjectionToken<TruffleContract<IBasicToken>>('BasicToken');
export const BurnableToken = new InjectionToken<TruffleContract<IBurnableToken>>('BurnableToken');
export const ERC20 = new InjectionToken<TruffleContract<IERC20>>('ERC20');
export const ERC20Basic = new InjectionToken<TruffleContract<IERC20Basic>>('ERC20Basic');
export const Heritable = new InjectionToken<TruffleContract<IHeritable>>('Heritable');
export const Migrations = new InjectionToken<TruffleContract<IMigrations>>('Migrations');
export const MintableToken = new InjectionToken<TruffleContract<IMintableToken>>('MintableToken');
export const MuzikaCoin = new InjectionToken<TruffleContract<IMuzikaCoin>>('MuzikaCoin');
export const MuzikaCoinSavingsWallet = new InjectionToken<TruffleContract<IMuzikaCoinSavingsWallet>>('MuzikaCoinSavingsWallet');
export const MuzikaPaperContract = new InjectionToken<TruffleContract<IMuzikaPaperContract>>('MuzikaPaperContract');
export const Ownable = new InjectionToken<TruffleContract<IOwnable>>('Ownable');
export const StandardToken = new InjectionToken<TruffleContract<IStandardToken>>('StandardToken');

export const ContractProviders: Provider[] = [
  { provide: BasicToken, useFactory: ProviderFactory(TruffleBasicToken), deps: [WEB3] },
  { provide: BurnableToken, useFactory: ProviderFactory(TruffleBurnableToken), deps: [WEB3] },
  { provide: ERC20, useFactory: ProviderFactory(TruffleERC20), deps: [WEB3] },
  { provide: ERC20Basic, useFactory: ProviderFactory(TruffleERC20Basic), deps: [WEB3] },
  { provide: Heritable, useFactory: ProviderFactory(TruffleHeritable), deps: [WEB3] },
  { provide: Migrations, useFactory: ProviderFactory(TruffleMigrations), deps: [WEB3] },
  { provide: MintableToken, useFactory: ProviderFactory(TruffleMintableToken), deps: [WEB3] },
  { provide: MuzikaCoin, useFactory: ProviderFactory(TruffleMuzikaCoin), deps: [WEB3] },
  { provide: MuzikaCoinSavingsWallet, useFactory: ProviderFactory(TruffleMuzikaCoinSavingsWallet), deps: [WEB3] },
  { provide: MuzikaPaperContract, useFactory: ProviderFactory(TruffleMuzikaPaperContract), deps: [WEB3] },
  { provide: Ownable, useFactory: ProviderFactory(TruffleOwnable), deps: [WEB3] },
  { provide: StandardToken, useFactory: ProviderFactory(TruffleStandardToken), deps: [WEB3] }
];
