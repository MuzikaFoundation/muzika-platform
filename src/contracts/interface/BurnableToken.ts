/* GENERATED BY TYPECHAIN VER. 0.1.5-remake */
/* tslint:disable */

import * as contract from 'truffle-contract';
import { BigNumber } from 'bignumber.js';
import {
  EtherAddress,
  EtherInteger,
  ITxParams,
  RawAbiDefinition,
  TruffleContract,
  TruffleContractInstance,
  TxValue,
  promisify
} from '../typechain-runtime';
import BuiltContract from '../../../build/contracts/BurnableToken.json';

export interface IBurnableToken extends TruffleContractInstance {
  totalSupply(): Promise<BigNumber>;
  balanceOf(_owner: EtherAddress): Promise<BigNumber>;

  transfer: {
    (_to: EtherAddress, _value: EtherInteger, txParams?: ITxParams): Promise<
      boolean
    >;
    sendTransaction: (
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    call: (
      _to: EtherAddress,
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<boolean>;
    request: (_to: EtherAddress, _value: EtherInteger) => Promise<string>;
    estimateGas: (_to: EtherAddress, _value: EtherInteger) => Promise<number>;
  };
  burn: {
    (_value: EtherInteger, txParams?: ITxParams): Promise<void>;
    sendTransaction: (
      _value: EtherInteger,
      txParams?: ITxParams
    ) => Promise<void>;
    call: (_value: EtherInteger, txParams?: ITxParams) => Promise<void>;
    request: (_value: EtherInteger) => Promise<string>;
    estimateGas: (_value: EtherInteger) => Promise<number>;
  };
}

export const TruffleBurnableToken: () => TruffleContract<IBurnableToken> = () =>
  contract(BuiltContract);
